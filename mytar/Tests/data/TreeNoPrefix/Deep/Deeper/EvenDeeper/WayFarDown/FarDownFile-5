#include <arpa/inet.h>
#include <grp.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <tar.h>
#include <unistd.h>

#include "mytar.h"
#include "options.h"
#include "debug.h"

char *joinname(char *prefix, char *name, char *buffer, int size) {
  /* build a filename out of prefix and name according
   * to tar's rules
   * buffer must be of size MT_NAMELEN + MT_PFXLEN + 2];
   * (room for a '/' and a nul )
   * on success returns the full name string, on failure, NULL
   */
  int plen=0, nlen=0;
  char *res;

  res = buffer;
  buffer[0]='\0';
  if (prefix)
    plen = strlen(prefix);
  if (name)
    nlen = strlen(name);

  if ( nlen + plen + 1 <= size ) {
    if ( plen ) {
      strcpy(buffer,prefix);
      if ( buffer[strlen(buffer)-1] != '/' )
        strcat(buffer,"/");
    }
    strcat(buffer,name);
  } else {
    res = NULL;
  }
  return buffer;
}

int split_name(char *path, char *prefix, char *name) {
  /* divide the given path into prefix and name components
   * that will satisfy ustar.
   * returns true on success, false otherwise
   */
  int ok=TRUE;
  int len, plen;
  char *here, *splitpoint;

  len = strlen(path);
  if(len > MT_MAX_NAME) {       /* it can't fit */
    ok = FALSE;
  } else {                      /* no need to split it */
    if ( len < MT_NAMELEN ) {
      strcpy(name, path);
      prefix[0]='\0';
    } else {                    /* we have to actually try */
      /* place a pointer at the head of the longest possible
       * name portion, then search forward for the next '/'/
       * Then break the string there.
       */
      here = path + len - MT_NAMELEN - 1; /* not the '/' */
      splitpoint = index(here, '/');
      if ( splitpoint ) {
        plen = splitpoint - path - 1; /* not the '/'  */
        if ( plen <= MT_PFXLEN ){
          /* do the prefix */
          memmove(prefix, path, plen);
          if ( plen < MT_PFXLEN )
            prefix[plen] = '\0';  /* terminate */
          /* do the name */
          strcpy(name, splitpoint+1); /* not the '/' */
        } else {
          ok = FALSE;
        }
      } else {
        ok = FALSE;
      }
    }
  }

  return ok;
}

char *build_name(char *path, char *tail, char *buffer, int size) {
  /* The given name must fit within the prefix/name structure
   * described by ustar.  This builds a full name and returns
   * the pointer if it can be properly split, NULL otherwise.
   */
  char *res;
  char pfx[MT_PFXLEN+1], rest[MT_NAMELEN+1];
  res = joinname(path,tail,buffer,size);
  if ( res ) {
    if ( !split_name(path, pfx, rest ) ) {
      /* check if it's splittable */
      res = NULL;
    }
  }
  return res;
}

static uint32_t extract_special_int(char *where, int len) {
  /* For interoperability with GNU tar.  GNU seems to
   * set the high-order bit of the first byte, then
   * treat the rest of the field as a binary integer
   * in network byte order.
   * I don't know for sure if it's a 32 or 64-bit int, but for
   * this version, we'll only support 32. (well, 31)
   * returns the integer on success, -1 on failure.
   * In spite of the name of htonl(), it converts int32_t
   */
  int32_t val= -1;
  if ( (len >= sizeof(val)) && (where[0] & 0x80)) {
    /* the top bit is set and we have space
     * extract the last four bytes */
    val = *(int32_t *)(where+len-sizeof(val));
    val = ntohl(val);           /* convert to host byte order */
  }
  return val;
}

static int insert_special_int(char *where, size_t size, int32_t val) {
  /* For interoperability with GNU tar.  GNU seems to
   * set the high-order bit of the first byte, then
   * treat the rest of the field as a binary integer
   * in network byte order.
   * Insert the given integer into the given field
   * using this technique.  Returns 0 on success, nonzero
   * otherwise
   */
  int err=0;

  if ( val < 0 || ( size < sizeof(val))  ) {
    /* if it's negative, bit 31 is set and we can't use the flag
     * if len is too small, we can't write it.  Either way, we're
     * done.
     */
    err++;
  } else {
    /* game on....*/
    memset(where, 0, size);     /*   Clear out the buffer  */
    *(int32_t *)(where+size-sizeof(val)) = htonl(val); /* place the int */
    *where |= 0x80;             /* set that high-order bit */
  }

  return err;
}


int do_common_header(struct tar_header *hdr, char *name, struct stat *sb) {
  /* build all the common headers.  In addition, insist on a name ending
   * in '/' if it happens to be a directory.  Because if this, it's possible
   * that previously splittable name will now become too long.  check for this.
   * returns 0 on success, positive on error
   */
  int len, err=0;
  char namebuf[MT_MAX_NAME+1];
  struct passwd *pwent;
  struct group *grent;

  /* clear out the header */
  memset(hdr, 0, sizeof(struct tar_header));

  /* add all the fields that are the same for all */
  len = strlen(name);
  if ( len < MT_MAX_NAME ) {
    strcpy(namebuf,name);
    if ( S_ISDIR(sb->st_mode) ) {
      if ( len == MT_MAX_NAME ) {
        fprintf(stderr,"%s: Path too long.\n", name);
        err ++;
      } else {
        namebuf[len++]='/';        /* put the slash on directories */
        namebuf[len]='\0';        /* put the slash on directories */
      }
    }
  } else {
    err++;
  }

  if ( !err ) {
    /* build the header fields */
    if ( split_name(namebuf, hdr->prefix, hdr->name) ) {
      hdr->mode = (sb->st_mode & ALL_TAR_MODES);
      hdr->uid  = sb->st_uid;
      hdr->gid  = sb->st_gid;
      /* size depends on the type */
      hdr->mtime = sb->st_mtime;
      /* checksum will be set later */
      /* typeflag will be set later */
      strcpy(hdr->magic, TMAGIC);
      strncpy(hdr->version, TVERSION, TVERSLEN);
      /* devmajor and devminor will be set later if needed */
      if ( (pwent=getpwuid(hdr->uid)) ) {
        strncpy(hdr->uname, pwent->pw_name, MT_UNAMLEN);
      }
      if ( (grent=getgrgid(hdr->gid)) ) {
        strncpy(hdr->gname, grent->gr_name, MT_UNAMLEN);
      }
    } else {
      if ( opt_verbose > 1 )
        fprintf(stderr, "%s: unable to partition name.\n", name);
      err++;
    }
  }

  return err;
}


static unsigned int compute_checksum(char block[MT_BLOCKSIZE]) {
  /* Sum up the whole block, subtract off anything in the checksum
   * field and add back a checksum field's worth of spaces
   */
  unsigned int i, sum;
  sum = 0;
  for (i=0; i < MT_BLOCKSIZE; i++ )
    sum += (unsigned char) block[i];

  for (i=0; i < MT_CSUMLEN; i++) {
    sum -= block[MT_CSUMOFF + i];
    sum += ' ';
  }

  return sum;
}

int insert_octal(char *where, size_t size, int val){
  /* take the given octal value, write it to a string
   * and place it in the right place.
   * size - 1 to allow for nul-termination as called for.
   */
  char buff[13];                /* the largest octal int */
  int err=0, len;

  sprintf(buff, "%0*o", (int)size-1, val);
  len = strlen(buff);
  if (len > size-1 ) {
    if ( opt_strict ) {
      if ( opt_verbose )
        fprintf(stderr,"%s: octal value too long. (0%o)\n", __FUNCTION__, val);
      err++;
    } else {
      /* try the second-chance of just stuffing the number in there */
      if ( insert_special_int(where, size, val) ) {
        if ( opt_verbose )
          fprintf(stderr, "%s: unable to isert integer in header. (0%o)\n",
                  __FUNCTION__, val);
        err++;
      }
    }
  } else {
    /* place it in place */
    memmove(where, buff, len);
  }
  return err;
}

int pack_header(struct tar_header *hdr, char *block) {
  /* Take a tar header written in a useful struct and
   * cram it into a block.  Returns 0 if all goes well,
   * positive if not.
   */
  int err = 0;                  /*  keep track of oopsies */
  unsigned int checksum;

  /* blank out the header to be sure */
  memset(block,0,MT_BLOCKSIZE);

  /* put the name back */
  memcpy(block+MT_NAMEOFF, hdr->name, MT_NAMELEN);

  /* then a few numbers */
  err += insert_octal(block + MT_MODEOFF, MT_MODELEN , (int)hdr->mode  );
  err += insert_octal(block + MT_UIDOFF,  MT_UIDLEN  , (int)hdr->uid   );
  err += insert_octal(block + MT_GIDOFF,  MT_GIDLEN  , (int)hdr->gid   );
  err += insert_octal(block + MT_SIZEOFF, MT_SIZELEN , (int)hdr->size  );
  err += insert_octal(block + MT_MTIMEOFF,MT_MTIMELEN, (int)hdr->mtime );
  err += insert_octal(block + MT_CSUMOFF, MT_CSUMLEN , (int)hdr->chksum);

  /* skip the checksum until the end */
  /* the type flag */
  block[MT_TYPEOFF] = hdr->typeflag;

  /* now a few more strings */
  memcpy(block+MT_LINKOFF, hdr->linkname, MT_LINKLEN);
  memcpy(block+MT_MAGOFF, hdr->magic, MT_MAGLEN);
  memcpy(block+MT_VEROFF, hdr->version, MT_VERLEN);
  memcpy(block+MT_UNAMOFF, hdr->uname, MT_UNAMLEN);
  memcpy(block+MT_GNAMOFF, hdr->gname, MT_GNAMLEN);

  /* major and minor numbers.  Insert only for devices, otherwise
   * leave empty.
   */
  if ( hdr->typeflag == CHRTYPE || hdr->typeflag == BLKTYPE ) {
    err += insert_octal(block+MT_MAJOFF, MT_MAJLEN, hdr->devmajor);
    err += insert_octal(block+MT_MINOFF, MT_MINLEN, hdr->devminor);
  }

  /* The prefix */
  memcpy(block+MT_PFXOFF, hdr->prefix, MT_PFXLEN);

  /* finally, the checksum */
  checksum = compute_checksum(block);
  err+=insert_octal(block+MT_CSUMOFF, MT_CSUMLEN, checksum);

  return err;
}

unsigned long extract_octal(char *where, int len, int *err) {
  /* extract an octal value that is either nul- or space-terminated
   * increments *err on error.
   */
  char tmpstring[MT_BLOCKSIZE+1]; /* used for numeric conversions */
  char *end;
  long num;

  /* make a string that we're sure is nul-terminated */
  memcpy(tmpstring, where, len);
  tmpstring[len] = '\0';

  /* convert the number */
  num = strtol(tmpstring, &end, 8);
  if ( *end != '\0' && *end != ' ' ) {
    if ( opt_strict )
      (*err)++;
    else {
      /* see if it's an encoded int like GNU does */
      num = extract_special_int(where, len);
      if ( num < 0 )
        (*err)++;
    }
  }

  return num;
}

int unpack_header(struct tar_header *hdr,
                                 char block[MT_BLOCKSIZE] ) {
  /* unpack the tar header in the given block into the given
   * header.  Validates the header (as well as we can)
   * Returns 0 on success, nonzero on failure.
   * This adds nuls and converts numbers as needed to make
   * the things useful.
   */
  int err = 0;
  unsigned int checksum=0;
  int i;

  /* first the name */
  memcpy(hdr->name, block+MT_NAMEOFF, MT_NAMELEN);
  hdr->name[MT_NAMELEN] = '\0'; /* Terminate */

  /* then a few numbers */
  hdr->mode   = (mode_t) extract_octal(block + MT_MODEOFF, MT_MODELEN , &err);
  hdr->uid    = (uid_t)  extract_octal(block + MT_UIDOFF,  MT_UIDLEN  , &err);
  hdr->gid    = (uid_t)  extract_octal(block + MT_GIDOFF,  MT_GIDLEN  , &err);
  hdr->size   = (size_t) extract_octal(block + MT_SIZEOFF, MT_SIZELEN , &err);
  hdr->mtime  = (time_t) extract_octal(block + MT_MTIMEOFF,MT_MTIMELEN, &err);
  hdr->chksum = (int)    extract_octal(block + MT_CSUMOFF, MT_CSUMLEN , &err);

  /* get the type */
  hdr->typeflag = block[MT_TYPEOFF];

  /* Now a few more strings */
  memcpy(hdr->linkname, block+MT_LINKOFF, MT_LINKLEN);
  hdr->linkname[MT_LINKLEN] = '\0'; /* Terminate */

  memcpy(hdr->magic, block+MT_MAGOFF, MT_MAGLEN);

  memcpy(hdr->version, block+MT_VEROFF, MT_VERLEN);
  hdr->version[MT_VERLEN] = '\0'; /* Terminate */

  memcpy(hdr->uname, block+MT_UNAMOFF, MT_UNAMLEN);
  memcpy(hdr->gname, block+MT_GNAMOFF, MT_GNAMLEN);

  hdr->devmajor = extract_octal(block+MT_MAJOFF, MT_MAJLEN, &err);
  hdr->devminor = extract_octal(block+MT_MINOFF, MT_MINLEN, &err);

  memcpy(hdr->prefix, block+MT_PFXOFF, MT_PFXLEN);
  hdr->prefix[MT_PFXLEN] = '\0'; /* Terminate */


  /* check for bogosity:
   *   If strict, insist on the standard.  If not, check for five characters
   * of "ustar" and a valid checksum.
   */

  /* check for the magic number */
  if (strncmp(hdr->magic, TMAGIC, strlen(TMAGIC))) {
    err++;
    if ( opt_verbose > 1 ) {
      fprintf(stderr, "%s(%d): bad magic number: \"%s\"\n", __FUNCTION__,
              __LINE__, hdr->magic);

    }
  }

  if ( opt_strict ) {
    /* check that the magic number is nul-terminated */
    if ( hdr->magic[strlen(TMAGIC)] != '\0' ) {
      err++;
      if ( opt_verbose > 1 ) {
        fprintf(stderr, "%s(%d): bad magic number (strict): \"%s\"\n",
                __FUNCTION__, __LINE__, hdr->magic);

      }
    }

    /* check the version number */
    for(i=0; i < TVERSLEN ; i++){
      if ( hdr->version[i] != TVERSION[i] ) {
        err++;
        if ( opt_verbose > 1 ) {
          fprintf(stderr, "%s(%d): bad version: \"%c%c\"\n",
                  __FUNCTION__, __LINE__, hdr->version[0], hdr->version[1]);
        }
        break;
      }
    }
  }

  /* now check the checksum: Sum up the whole block, subtract off anything
   */
  checksum = compute_checksum(block);
  if ( checksum != hdr->chksum ) {
    err++;
    if ( opt_verbose > 1 ) {
      fprintf(stderr, "%s(%d): bad checksum: %d.  Expected %d.\n",
              __FUNCTION__, __LINE__, checksum, hdr->chksum);

    }
  }


  if ( !err && opt_verbose > 1 ) {
    fprintf(stderr, "%s: reading header:\n", __FUNCTION__);
    debug_print_header(stderr, hdr);
  }
  return err;
}


#ifdef TESTMAIN
int main(int argc, char *argv[]) {
   char pfx[MT_PFXLEN+1], rest[MT_NAMELEN+1];
   int i;
   char *name;

   for(i=1; i< argc; i++ ) {
     name = argv[i];
     printf("\n\nSplitting: %s...", name);
     if ( split_name(name , pfx, rest) ) {
       printf("ok.\n");
       printf("  pfx: \"%s\"\n", pfx);
       printf("  nam: \"%s\"\n", rest);
     } else {
       printf("nope.\n");
     }
   }
   return 0;
}
#endif
