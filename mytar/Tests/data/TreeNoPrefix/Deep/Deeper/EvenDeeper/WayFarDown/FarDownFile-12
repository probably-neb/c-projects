/*
 * The tarfile processing functions
 *
 * Author: Dr. Phillip Nico
 *         Department of Computer Science
 *         California Polytechnic State University
 *         One Grand Avenue.
 *         San Luis Obispo, CA  93407  USA
 *
 * Email:  pnico@csc.calpoly.edu
 *
 * Revision History:
 *         $Log: tar.c,v $
 *         Revision 1.1  2010-10-27 21:23:35-07  pnico
 *         Initial revision
 *
 *
 */
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <tar.h>
#include <time.h>
#include <unistd.h>
#include <utime.h>
#include "blocks.h"
#include "mytar.h"
#include "options.h"
#include "perms.h"
#include "debug.h"
#include "toc.h"

#define DATELEN 18

int add_tree_to_archive(int fd, char *path, tar_toc toc);
int add_file_to_archive(int fd, char *fullname, tar_toc toc);

int create_outfile(char name[MT_NAMELEN + MT_PFXLEN + 2],
                   struct tar_header *hdr) {
  /* create the given outfile with the given permissions.  This
   * includes any leading directories
   *
   * If creating a regular file, returns an open write file descriptor
   * or -1 on failure.  For any other type, returns -1 either way.
   * Errors for those are reported here.
   */
  char path[MT_NAMELEN + MT_PFXLEN + 2];
  mode_t mode;
  char *there;
  int fd=-1;                    /* default to no output */
  int err=0;

  strcpy(path,name);

  /* find and create all the directories, in order */
  there = path;
  while ( (there = index(there, '/')) && !err ) {
    /* temporarily cut off the name */
    *there = '\0';

    /* Create this directory, if necessary */
    if ( -1 == mkdir (path, MT_DEF_PERMS) ) {
      if ( errno != EEXIST ) {
        perror(path);
        err++;
      }
    };

    if ( opt_verbose > 2 )
      fprintf(stderr, "(%s) making: \"%s\"\n", __FUNCTION__, path);

    /* put back the slash and move on */
    *there++ = '/';
  }

  if ( !err ) {
    /* work out the permissions, and make the thing */
    if ( hdr->mode & MT_ALLX_PERMS )
      mode = MT_DEF_PERMS;      /* with X */
    else
      mode = MT_DEF_PERMS & ~MT_ALLX_PERMS; /* no X */

    switch (hdr->typeflag) {
    case REGTYPE:               /* fall through */
    case AREGTYPE:              /* fall through */
    case CONTTYPE:              /* create the file */

      fd = open(path, O_WRONLY | O_CREAT | O_TRUNC, mode);

      if ( fd == -1 )
        perror(path);
      if ( opt_verbose > 2 )
        printf("(%s) filename: \"%s\"\n", __FUNCTION__, path);
      break;
    case DIRTYPE:     /* Directory.  */
      /* if path did not end in '/' it might need creating */
      if ( path[strlen(path)-1] != '/' ) {
        if ( -1 == mkdir (path, MT_DEF_PERMS) ) {
          if ( errno != EEXIST ) {
            perror(path);
            err++;
          }
        };
      }
      break;
    case LNKTYPE:     /* Hard link.  */
      if ( -1 == link(hdr->linkname, hdr->name) ) {
        perror(hdr->name);
        err++;
      }
      break;
    case SYMTYPE:     /* Symbolic link (hard if not supported).  */
      if ( -1 == symlink(hdr->linkname, hdr->name) ) {
        perror(hdr->name);
        err++;
      }
      break;
    case CHRTYPE:     /* Character special.  */
    case BLKTYPE:     /* Block special.  */
    case FIFOTYPE:    /* Named pipe.  */
      fprintf(stderr, "%s: Unimplemented file type(%c).  Bummer\n",
              __FUNCTION__, hdr->typeflag);
    }
  }

  return fd;
}

int write_end_of_archive(int fd) {
  /* write an end of archive marker */
  int err = 0;
  char marker[2 * MT_BLOCKSIZE];

  memset(marker, 0, 2 * MT_BLOCKSIZE);
  if ( (2 * MT_BLOCKSIZE) != write(fd, marker, 2 * MT_BLOCKSIZE) ) {
    perror(__FUNCTION__);
    err++;
  }
  return err;
}


int end_of_archive(blocklist bl) {
  /* checks to see if there are two blocks of NULs ahead of
   * us.  If not, shoves the read data back onto the input stream.
   * If we encounter EOF, report a malformed archive and go
   * with true.
   */
  char first[MT_BLOCKSIZE], second[MT_BLOCKSIZE];
  int i, res;

  /* read the blocks */
  if ( !read_block(bl, first) || !read_block(bl, second)) {
    fprintf(stderr,"%s: Unexpected EOF while reading archive.\n",
            bl->filename);
    res = 1;                    /* surely, we're done */
  } else {
    res = 1;                    /* hope for the best */

    for (i=0; i < MT_BLOCKSIZE; i++) {
      if ( first[i] != '\0' ) {
        res = 0;
        break;
      }
    }

    for (i=0; i < MT_BLOCKSIZE; i++) {
      if ( second[i] != '\0' ) {
        res = 0;
        break;
      }
    }

    if ( !res ) {
      /* it's not the end of the archive, put the blocks back */
      unread_block(bl, second);
      unread_block(bl, first);
    }
  }

  return res;
}

int file_in_list(char *candidate, char *list[]) {
  /* return true if the filename is found in the given list.
   * This has to be a little sneaky, because the match could
   * be direct, or it could be a directory prefix.  We have
   * to try both.
   */
  int res = FALSE;
  int i, len;

  if ( list )  {
    if ( opt_verbose > 1 ) {
      fprintf(stderr,"%s: looking for \"%s\"...", __FUNCTION__, candidate);
    }

    /* First try for a direct match */
    for(i=0; list[i] && !res; i++) {
      if ( !strcmp(list[i], candidate) )
        res=TRUE;
    }

    /* now, if necessary, see if it's a directory prefix */
    for(i=0; list[i] && !res; i++) {
      len = strlen(list[i]);
      if ( !strncmp(list[i], candidate, len) ) {
        /* it's a prefix... is it a directory prefix?
         * If there was a '/' in the last position
         * of the matching substring, or, if not, one just
         * after that position in the candidate
         */
        if ( list[i][len-1] == '/' || /* we compared it */
             candidate[len] == '/' )  /* it was there anyhow */
          res=TRUE;
      }
    }

    if ( opt_verbose > 1 ) {
      fprintf(stderr,"%s.\n", (res?"FOUND":"nope"));
    }
  }
  return res;
}

int process_entry(blocklist bl, char *list[], int how, tar_toc toc) {
  /* Read a single entry from the given tarfile.  Returns
   * 0 on success nonzero to indicate error.
   */
  char block[MT_BLOCKSIZE];
  char namebuf[MT_MAX_NAME + 1]; /* room for a '/' and a nul */
  char modeline[MODELEN];
  char groupname[MT_GNAMLEN+1];
  char username[MT_UNAMLEN+1];
  char ogstring[MT_UNAMLEN+MT_GNAMLEN+2];
  char datestring[DATELEN+1];
  struct tar_header header;
  int err=0;
  int num;
  int listall=FALSE;
  int copyout;                  /* flag for whether to extract _this_ file */

  if ( !list || !list[0] )      /* if there are no elements in the list */
    listall = TRUE;             /* list everything  */

  if ( !read_block(bl, block) ) {
    fprintf(stderr, "%s: Unable to read complete header\n", __FUNCTION__);
    err++;
  } else {
    /* Read the header of the next record  */
    if ( !(num = unpack_header(&header, block) ) ) {
      /* Successfully read a header */
      if ( opt_verbose > 1 ) {
        printf("Read header\n");
      }

      /* Build listing information, if called for */
      if ( joinname(header.prefix, header.name, namebuf, MT_MAX_NAME) ) {
        copyout = FALSE;
        if ( listall || file_in_list(namebuf, list)) {
          copyout = TRUE;       /* we do this one */
          if ( opt_verbose && (how == MT_LIST)) {
            /* do the verbose listing */
            /* get the group and user names */
            if ( strlen(header.uname) ) {
              strncpy(username, header.uname, MT_UNAMLEN);
            } else {
              snprintf(username,MT_UNAMLEN+1,"%d",header.uid);
            }
            if ( strlen(header.gname) ) {
              strncpy(groupname, header.gname, MT_GNAMLEN);
            } else {
              snprintf(groupname,MT_UNAMLEN+1,"%d",header.gid);
            }

            /* make the owner/group  string */
            snprintf(ogstring,MT_UNAMLEN+MT_GNAMLEN+1,"%s/%s", username,
                     groupname);

            /* print the listing line */
            strftime(datestring, DATELEN, "%Y-%m-%d %H:%M",
                     localtime(&header.mtime));
            printf("%s %-17s %8d %s %s\n",
                   mode2str(modeline, header.mode, header.typeflag),
                   ogstring, (int)header.size, datestring, namebuf);
          } else if ( (how==MT_LIST) || opt_verbose ) {
            printf("%s\n", namebuf);
          }
        }
      } else {
        fprintf(stderr, "%s: joinname failed.  That's bad\n", __FUNCTION__);
        err++;
      }
    } else {
      /* if there's a bad header, we're really up a creek */
      fprintf(stderr, "%s: Malformed header found.  Bailing.\n",__FUNCTION__);
      exit(1);               /* The bailing part... */
    }

    /* Having read a header, do the right thing with the data */
    if ( !err ) {
      int i, blks;
      int fd;

      /* open the output file, if appropriate. */
      if ( how == MT_EXTRACT && copyout ) {
        /* create the file and any leading directories */
        fd = create_outfile(namebuf, &header);
      } else {
        fd = -1;                  /* flag as don't copy */
      }

      /* consume the data, copying if appropriate. */
      blks = header.size/MT_BLOCKSIZE + ((header.size%MT_BLOCKSIZE)?1:0);
      for(i=0;i<blks;i++) {
        if ( !read_block(bl, block) ) {
          fprintf(stderr, "%s: Unexpected end of archive.\n",__FUNCTION__);
          break;
          err++;
        }

        /* copy data if appropriate */
        if ( fd != -1 ) {
          size_t size = MT_BLOCKSIZE;
          if ( i == blks-1 ) {
            /* the last block may be uneven */
            if ( header.size % MT_BLOCKSIZE )
              size = header.size % MT_BLOCKSIZE;
          }

          if ( -1 == write(fd, block, size)) {
            perror("write");
            err++;
          }

        }
      }

      /* if there's an output file, set its mtime and then
       * close it */
      if ( fd != -1 ) {
        int res;
        struct stat sb;
        struct utimbuf ut;

        res=fstat(fd, &sb);
        close(fd);            /*  close it */
        /* now set the times */
        if (res != -1) {
          ut.modtime = header.mtime; /* set the modification time */
          ut.actime  = sb.st_atime;  /* don't change this */
          res = utime(namebuf, &ut);
        }
        if (res == -1) {
          perror(namebuf);
          err++;
        }
      }

      /* add to TOC if appropriate */
      add_to_toc(toc, namebuf, &header, NO_INODE);
    }
  }

  return err;
}

int list_archive(char *filename, char *list[]) {
  /* List the given tarfile.  If list is not empty, only list
   * elements in the list.  If not, list everything
   * returns zero on success, nonzero on failure/
   */
  int fd;
  int err=0;
  blocklist bl;

  if ( -1 == (fd = open(filename, O_RDONLY))) {
    perror(filename);
    err++;
  } else {
    bl = open_blocklist(fd, filename);

    while ( !end_of_archive(bl)) {
      /* process each entry */
      err += process_entry(bl, list, MT_LIST, NULL);
    }

    close_blocklist(bl);
    if ( -1 == close(fd)) {
      perror(filename);
      err++;
    }
  }

  return err;
}

int extract_archive(char *filename, char *list[]){
  /* Extract the given tarfile.  If list is not empty, only list
   * elements in the list.  If not, list everything
   * returns zero on success, nonzero on failure/
   */
  int fd;
  int err=0;
  blocklist bl;
  tar_toc toc;

  /* first open the archive */
  if ( -1 == (fd = open(filename, O_RDONLY))) {
    perror(filename);
    err++;
  } else {
    /* looks like we opened the archive, let's do it. */
    if ( opt_preserve ) {
      toc = create_toc();
    } else {
      toc = NULL;
    }

    bl = open_blocklist(fd, filename);

    while ( !end_of_archive(bl)) {
      /* process each entry */
      err += process_entry(bl, list, MT_EXTRACT, toc);
    }

    close_blocklist(bl);
    if ( -1 == close(fd)) {
      perror(filename);
      err++;
    }

    if ( toc ) {
      destroy_toc(toc);
    }
  }

  return err;
}

int add_file_to_archive(int fd, char *fullname, tar_toc toc) {
  /* add the given file to the archive
   * returns 0 on success, more than zero on error.
   */
  struct stat sb;
  struct tar_header header;
  char block[MT_BLOCKSIZE];
  int file, num, len;
  int err=0;

  if ( -1 != lstat(fullname, &sb ) ) {
    /* do the common header fields */
    err += do_common_header(&header, fullname, &sb);
    if ( err ) {
      fprintf(stderr,
              "%s: unable to construct header.  (Name too long?) Skipping.\n",
              fullname);
    } else {
      /* now do the type-specific stuff */
      /* FIXME: this would be the place to check for hard links */
      if ( S_ISDIR(sb.st_mode) ) {
        header.typeflag = DIRTYPE;
        header.size = 0;
      } else if ( S_ISREG(sb.st_mode) ) {
        header.typeflag = REGTYPE;
        header.size = sb.st_size;
      } else if ( S_ISLNK(sb.st_mode) ) {
        header.typeflag = SYMTYPE;
        len = readlink(fullname, header.linkname, MT_LINKLEN);
        if ( len == -1 ) {
          /* it failed */
          perror(fullname);
          err++;
        } else {
          /* terminate it */
          fullname[len] = '\0';
        }
      } else if ( S_ISCHR(sb.st_mode) || S_ISBLK(sb.st_mode) ||
                  S_ISFIFO(sb.st_mode)|| S_ISSOCK(sb.st_mode) ) {
        fprintf(stderr,"%s: unsupported file type.\n", fullname);
        err++;
      } else {
        fprintf(stderr,"%s: unknown file type.\n", fullname);
        err++;
      }
    }
    /* pack the header ( adds checksum and does other checks ) */
    if ( pack_header(&header, block) ) {
      fprintf(stderr, "%s: Unable to create conforming header.  Skipping.\n",
              fullname);
      err++;
    }
    /* make sure we can read the file before getting too excited */

    if ( S_ISREG(sb.st_mode) && (-1 ==(file = open(fullname, O_RDONLY)))) {
      perror(fullname);
      err++;
    }

    if ( !err ) {
      /* write the header */
      if ( MT_BLOCKSIZE != write(fd, block, MT_BLOCKSIZE) ) {
        err++;
      } else {
        /* copy out the file, if this is a copying kind of thing */
        num = 0;          /* the first iteration may be short-circuited */
        while ( header.size &&
                (num = read(file, block, MT_BLOCKSIZE )) > 0 ) {
          /* pad with null if needed */
          if ( num != MT_BLOCKSIZE ) {
            memset(block+num, 0, MT_BLOCKSIZE-num);
          }
          if ( MT_BLOCKSIZE != write(fd, block, MT_BLOCKSIZE) ) {
            perror(opt_tarfile);
            err++;
          }
        }
        if ( num < 0 ) {
          perror(__FUNCTION__);
          err++;
        }
      }
    }
  }

  if ( !err && opt_verbose ) {
    printf("%s\n", fullname);
  }

  return err;
}


int add_tree_to_archive(int fd, char *path, tar_toc toc) {
  /* add the tree at the given path to the given
   * archive, assuming the names aren't too long.
   */
  struct stat sb;
  DIR *subd;
  struct dirent *ent;
  int len, err=0;
  char namebuf[MT_MAX_NAME+1];

  /* it's a directory, go all the way down */

  /* First, trim off the '/' at the end.  It will be restored when the
   * header is created.  For now it's easier this way.
   */
  len = strlen(path);
  if ( path[len-1] == '/' )
    path[len-1] = '\0';

  /* add the directory itself */
  err += add_file_to_archive(fd, path, toc);

  /* now all files in it */
  if ( !(subd = opendir(path)) ) {
    perror(path);
  } else {
    while((ent=readdir(subd))) {
      if ( !strcmp(".", ent->d_name) || !strcmp("..",ent->d_name))
        continue;               /* skip these two links */
      if (build_name(path, ent->d_name, namebuf, MT_MAX_NAME)) {
        /* if we can build a conforming name, add it */
        if (-1 == lstat(namebuf, &sb)) {
          perror(namebuf);
          err++;
        } else {
          if ( S_ISDIR(sb.st_mode))
            err += add_tree_to_archive(fd, namebuf, toc);
          else
            err += add_file_to_archive(fd, namebuf, toc);
        }
      }
    }
  }
  return err;
}


int create_archive(char *filename, char *list[]){
  /* create the given tarfile.  If list is not empty, only list
   * elements in the list.  If not, list everything
   * returns zero on success, nonzero on failure/
   */
  int err=0;
  int i, fd;
  tar_toc toc;
  struct stat sb;

  if ( -1 == (fd = open(filename, O_WRONLY| O_CREAT| O_TRUNC,
                        (MT_DEF_PERMS & ~MT_ALLX_PERMS)))) {
    perror(filename);
    err++;
  }
  toc = create_toc();

  for(i=0; list[i]; i++) {
    if ( -1 != lstat(list[i],&sb) ){
      if ( S_ISDIR(sb.st_mode))
        err += add_tree_to_archive(fd, list[i], toc);
      else
        err += add_file_to_archive(fd, list[i], toc);
    }
  }

  err+=write_end_of_archive(fd);

  if ( toc ) {
    destroy_toc(toc);
  }

  if ( -1 == close(fd)) {
    perror(filename);
    err++;
  }
  return err;
}

